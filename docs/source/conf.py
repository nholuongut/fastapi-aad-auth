# -*- coding: utf-8 -*-
#
# fastapi-aad-auth documentation build configuration file, created by
# sphinx-quickstart on Fri Jun 20 19:35:22 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import datetime as dt
from pathlib import Path
from typing import Any
import uuid

from pydantic import BaseModel, SecretStr
import sphinx_material
from sphinx.ext.autodoc import ALL, ClassDocumenter


from fastapi_aad_auth import __version__
__author__ = 'David Pugh'

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.mathjax',
    'sphinx.ext.extlinks',
    'sphinx.ext.todo',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx_github_changelog',
    'sphinx_material'
]

extlinks = {
    "issue": ("https://github.com/nholuongut/fastapi-aad-auth/issues/%s", "#"),
    "pull": ("https://github.com/nholuongut/fastapi-aad-auth/pull/%s", "PR #"),
    "user": ("https://github.com/%s", "@"),
    "pypi": ("https://pypi.org/project/%s", ""),
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'fastapi_aad_auth'
copyright = str(dt.datetime.now().year)+' '+__author__

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = __version__
# The full version, including alpha/beta/rc tags.
release = __version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = 'English'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
default_role = ':any:'

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

rst_epilog = """
.. role:: latex(raw)
   :format: latex
"""
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

autoclass_content='both'
autodoc_class_signature='mix'

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

# Required theme setup

# Set link name generated in the top bar.
html_title = 'FastAPI AAD Authentication'

html_theme = 'sphinx_material'
html_theme_path = sphinx_material.html_theme_path()
html_context = sphinx_material.get_html_context()
# Material theme options (see theme.conf for more information)
html_theme_options = {

    # Set the name of the project to appear in the navigation.
    'nav_title': html_title,

    # Specify a base_url used to generate sitemap.xml. If not
    # specified, then no sitemap will be built.
    'base_url': 'https://nholuongut.github.io/fastapi_aad_auth',

    # Set the repo location to get a badge with stats
    'repo_url': 'https://github.com/nholuongut/fastapi-aad-auth/',
    'repo_name': 'fastapi_aad_auth',

    # Visible levels of the global TOC; -1 means unlimited
    'globaltoc_depth': 1,
    # If False, expand all TOC entries
    'globaltoc_collapse': False,
    # If True, show hidden TOC entries
    'globaltoc_includehidden': False,
    "logo_icon": "lock",
    "repo_type": "github",
    # "globaltoc_depth": 2,
    "color_primary": "cyan",
    "color_accent": "teal",
    "touch_icon": "images/apple-icon-152x152.png",
    "theme_color": "#2196f3",
    "master_doc": False,
    "nav_links": [
        {
            "href": "https://fastapi.tiangolo.com/",
            "internal": False,
            "title": "FastAPI",
        },
        {
            "href": "https://azure.microsoft.com/en-gb/services/active-directory/",
            "internal": False,
            "title": "Azure Active Directory",
        }
    ],
    "heroes": {
        "index": "Adding Azure Active Directory Authentication for fastAPI",
    },
    "version_dropdown": False,
}
html_sidebars = {
    "**": ["logo-text.html", "globaltoc.html", "localtoc.html", "searchbox.html"]
}
# on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

# if not on_rtd:  # only import and set the theme if we're building docs locally
#     import sphinx_rtd_theme
#     html_theme = 'sphinx_rtd_theme'
#     html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {
#     "rightsidebar":'false',
#     "sidebarbgcolor":'#606060',#001166',
#     "sidebartextcolor":'#D8D8D8',
#     "relbarbgcolor": "black",
#     "sidebarlinkcolor":"#AADDFF",
#     'headtextcolor':"#000066",
#     "codebgcolor":"#EAEAFF",
#     "footerbgcolor":"black",
#     'stickysidebar':'true',
#     'collapsiblesidebar':'false',
# }

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = f'{project} documentation'

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = 'figures/logo.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y (version '+str(__version__)+')'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'fastapi-aad-authdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
'papersize': 'a4paper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
'preamble': r"""\twoside\n
""",
}
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('latex', 'fastapi-aad-auth.tex', u'fastapi-aad-auth',
   __author__, 'custom_manual'),
]
# The name of an image file (relative to this directory) to place at the top of
# the title page.
latex_logo = "figures/latex-logo.png"

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
latex_show_urls = 'footnote'

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
latex_domain_indices = False

latex_additional_files = ['./_static/custom_manual.cls']


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('man', 'fastapi-aad-auth', u'fastapi-aad-auth',
     [ __author__], 1)]

# If true, show URL addresses after external links.
man_show_urls = True


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'fastapi-aad-auth', u'fastapi-aad-auth',
    __author__, 'fastapi-aad-auth', 'Adding Azure Active Directory Authentication for FastAPI',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'fastapi-aad-auth'
epub_author = __author__
epub_publisher = __author__
epub_copyright = copyright

# The basename for the epub file. It defaults to the project name.
#epub_basename = u'fastapi-aad-auth'

# The HTML theme for the epub output. Since the default themes are not optimized
# for small screen space, using the same theme for HTML and epub output is
# usually not wise. This defaults to 'epub', a theme designed to save visual
# space.
#epub_theme = 'epub'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Choose between 'default' and 'includehidden'.
#epub_tocscope = 'default'

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}


class ConfigDocumenter(ClassDocumenter):

    objtype = 'config'
    directivetype = 'data'
    domain = 'py'
    priority = -1000

    def generate(self, *args, **kwargs) -> None:
        """Generate reST for the object given by *self.name*, and possibly for
        its members.
        If *more_content* is given, include that content. If *real_modname* is
        given, use that module name to find attribute docs. If *check_module* is
        True, only generate if the object is defined in the module name it is
        imported from. If *all_members* is True, document all members.
        """
        if not self.parse_name():
            return
        # now, import the module and get object to document
        if not self.import_object():
            return
        sourcename = self.get_sourcename()
        config_vars = self._process_variables(self.object, '<Config>')

        # e.g. the module directive doesn't have content
        self.indent = ''
        # add all content (from docstrings, attribute docs etc.)
        self.analyzer = None
        self.add_directive_header('')
        self.add_line('**Options:**', sourcename)
        for line in config_vars:
            self.add_line(line, sourcename)

    @classmethod
    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
                            ) -> bool:
        return hasattr(member, '__mro__') and BaseModel in member.__mro__

    def _process_variables(self, object, path):
        config_vars = []
        config_nested = {}
        for field_name, field in object.__fields__.items():

            if 'providers' == field_name:
                config_nested[field_name] = ['    List of auth provider classes to use (defaults to AAD)', '']
            elif BaseModel in field.type_.__mro__:
                # This is recursive here
                config_nested[field_name] = self._process_variables(field.type_, f'{path}.{field_name}')
            else:
                default_str = ''
                if field.default:
                    if not SecretStr in field.type_.__mro__:
                        if Path in field.type_.__mro__:
                            field.default = str(Path(field.default).relative_to(Path(field.default).parents[2]))
                        if field_name == 'user_klass':
                            default_str = f' [default: :class:`{field.default.replace("`", "").replace(":", ".")}`]'
                        else:
                            default_str = f' [default: ``{field.default}``]'
                    else:
                        default_str = ' [default: ``uuid.uuid4()``]'
                module = field.outer_type_.__module__
                if module != 'builtins':
                    if hasattr(field.outer_type_, '__origin__'):
                        type_ = f' (:class:`{field.outer_type_.__origin__.__name__}`) '
                    elif not hasattr(field.outer_type_, '__name__'):
                        type_ = ''
                    else:
                        type_ = f' (:class:`{module}.{field.outer_type_.__name__}`) '
                else:
                    type_ = f' (``{field.outer_type_.__name__}``) '
                env_var = ''
                if 'env' in field.field_info.extra:
                    env_var = f' (Can be set by ``{field.field_info.extra["env"]}`` environment variable)'
                config_vars.append(f'  * ``{path}.{field_name}``{type_}: {field.field_info.description}{default_str}{env_var}')
        for field_name in sorted(config_nested.keys()):
            config_vars.append(f'  ``{path}.{field_name}``:')
            for var in config_nested[field_name]:
                config_vars.append(f'  {var}')
        config_vars.append('')
        return config_vars


def autodoc_process_pydantic_signature(app, what, name, obj, options, signature, return_annotation):
    if what=='class' and BaseModel in obj.__mro__:
        signature = '(**kwargs)'
    return signature, return_annotation


def setup(app):
    from sphinx.util.texescape import tex_replacements
    tex_replacements += [(u'£', u"\\")]
    app.add_autodocumenter(ConfigDocumenter)
    app.connect('autodoc-process-signature', autodoc_process_pydantic_signature)
